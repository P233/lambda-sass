@import "true";
@import "./lambda";

@include test-module("Test helper functions:") {
  @include test("_replace-args") {
    @include assert-equal(_replace-args((_ _), [1]), (1 1));
    @include assert-equal(_replace-args((_2 _1), ("a" "b")), ("b" "a"));
    @include assert-equal(_replace-args((_2 _1), ("a" "b" "c")), ("b" "a"));

    // [TODO] `_replace-args((_2 _1), [ "a" ])` should return error
  }

  @include test("_call-fn") {
    @include assert-equal(_call-fn("inc", 1), 2);
    @include assert-equal(_call-fn("add", 1, 2, 3), 6);
  }

  @include test("_call-lambda") {
    @include assert-equal(_call-lambda((add _ 10), 1), 11);
    @include assert-equal(_call-lambda((add _1 _2), 1, 2), 3);
  }

  @include test("_auto-call") {
    @include assert-equal(_auto-call("inc", 1), 2);
    @include assert-equal(_auto-call("add", 1, 2, 3), 6);
    @include assert-equal(_auto-call((add _ 10), 1), 11);
    @include assert-equal(_auto-call((add _1 _2), 1, 2), 3);
  }
}

@include test-module("Test math functions:") {
  @include test("add") {
    @include assert-equal(add([1, 2, 3]), 6);
    @include assert-equal(add([ "#", "a", "b", "c" ]), "#abc");
    @include assert-equal(add(1, 2, 3), 6);
    @include assert-equal(add("#", "a", "b", "c"), "#abc");
  }

  @include test("inc") {
    @include assert-equal(inc(1), 2);
  }

  @include test("dec") {
    @include assert-equal(dec(1), 0);
  }

  @include test("odd") {
    @include assert-equal(odd(2), false);
    @include assert-equal(odd(1), true);
    @include assert-equal(odd(0), false);
    @include assert-equal(odd(-1), true);
    @include assert-equal(odd(-2), false);
  }

  @include test("even") {
    @include assert-equal(even(2), true);
    @include assert-equal(even(1), false);
    @include assert-equal(even(0), true);
    @include assert-equal(even(-1), false);
    @include assert-equal(even(-2), true);
  }

  @include test("greater") {
    @include assert-equal(greater([1]), true);
    @include assert-equal(greater([2, 1]), true);
    @include assert-equal(greater([1, 2]), false);
    @include assert-equal(greater([4, 3, 2, 1]), true);
    @include assert-equal(greater([4, 2, 3, 1]), false);
    @include assert-equal(greater(1), true);
    @include assert-equal(greater(2, 1), true);
    @include assert-equal(greater(1, 2), false);
    @include assert-equal(greater(4, 3, 2, 1), true);
    @include assert-equal(greater(4, 2, 3, 1), false);
  }

  @include test("less") {
    @include assert-equal(less([1]), true);
    @include assert-equal(less([1, 2]), true);
    @include assert-equal(less([2, 1]), false);
    @include assert-equal(less([1, 2, 3, 4]), true);
    @include assert-equal(less([1, 3, 2, 4]), false);
    @include assert-equal(less(1), true);
    @include assert-equal(less(1, 2), true);
    @include assert-equal(less(2, 1), false);
    @include assert-equal(less(1, 2, 3, 4), true);
    @include assert-equal(less(1, 3, 2, 4), false);
  }

  @include test("equal") {
    @include assert-equal(equal([1]), true);
    @include assert-equal(equal([1, 1]), true);
    @include assert-equal(equal([ "a", "a", 1]), false);
    @include assert-equal(equal([ "a", "a", "a" ]), true);
    @include assert-equal(equal(1), true);
    @include assert-equal(equal(1, 1), true);
    @include assert-equal(equal("a", "a", 1), false);
    @include assert-equal(equal("a", "a", "a"), true);
  }
}

@include test-module("Test list functions:") {
  @include test("first") {
    @include assert-equal(first((1 2 3)), 1);
    @include assert-equal(first([1]), 1);
    @include assert-equal(first(()), null);
    @include assert-equal(first(""), null);
    @include assert-equal(first("#abc"), "#");
  }

  @include test("last") {
    @include assert-equal(last((1 2 3)), 3);
    @include assert-equal(last([1]), 1);
    @include assert-equal(last(()), null);
    @include assert-equal(last(""), null);
    @include assert-equal(last("#abc"), "c");
  }

  @include test("rest") {
    @include assert-equal(rest((1 2 3)), (2 3));
    @include assert-equal(rest([1]), ());
    @include assert-equal(rest(()), ());
    @include assert-equal(rest(""), ());
    @include assert-equal(rest("#abc"), ("a" "b" "c"));
  }

  @include test("reverse") {
    @include assert-equal(reverse((1 2 3 4 5)), (5 4 3 2 1));
    @include assert-equal(reverse(1, 2, 3, 4, 5), (5 4 3 2 1));
  }
}

@include test-module("Test iterator functions:") {
  @include test("map") {
    @include assert-equal(map(inc, [1 2 3]), (2 3 4));
    @include assert-equal(map((add 1 _), [1 2 3]), (2 3 4));
    @include assert-equal(map(first, [[1] [2] [3]]), (1 2 3));
    @include assert-equal(map(inc, 1, 2, 3), (2 3 4));
    @include assert-equal(map((add 1 _), 1, 2, 3), (2 3 4));
    @include assert-equal(map(first, [1], [2], [3]), (1 2 3));
  }

  @include test("filter") {
    @include assert-equal(filter(odd, [1 2 3]), (1 3));
    @include assert-equal(filter((greater _ 1), [1 2 3]), (2 3));
    @include assert-equal(filter(odd, 1, 2, 3), (1 3));
    @include assert-equal(filter((greater _ 1), 1, 2, 3), (2 3));
  }

  @include test("reduce") {
    @include assert-equal(reduce((add _1 _2), 0, (1 2 3)), 6);
    @include assert-equal(
      reduce((add _1 _2 _2), "#", [ "a", "b", "c" ]),
      "#aabbcc"
    );
    @include assert-equal(reduce((add _1 _2), 0, 1, 2, 3), 6);
    @include assert-equal(
      reduce((add _1 _2 _2), "#", "a", "b", "c"),
      "#aabbcc"
    );
  }

  @include test("some") {
    @include assert-equal(some(even, [-1 0 12]), true);
    @include assert-equal(some(even, [-1 3 11]), false);
    @include assert-equal(some(even, -1, 0, 12), true);
    @include assert-equal(some(even, -1, 3, 11), false);
  }

  @include test("every") {
    @include assert-equal(every(odd, [-1 3 9]), true);
    @include assert-equal(every(odd, [-1 0 9]), false);
    @include assert-equal(every(odd, -1, 3, 9), true);
    @include assert-equal(every(odd, -1, 0, 9), false);
  }

  @include test("thread-as") {
    @include assert-equal(thread-as(1, inc, (add 10 _ 5), inc, dec), 17);
  }

  @include test("thread-first") {
    @include assert-equal(thread-first(1, inc, (add 10 5), inc, dec), 17);
  }

  @include test("thread-last") {
    @include assert-equal(thread-last(1, inc, (add 10 5), inc, dec), 17);
  }
}
