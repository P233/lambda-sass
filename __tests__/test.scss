/* stylelint-disable scss/double-slash-comment-empty-line-before, at-rule-empty-line-before, import-notation */
@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "true" as *;

@import "../src/lambda";

@include test-module("Test helper functions:") {
  @include test("__replace-args") {
    @include assert-equal(__replace-args((_ _), [1]), (1 1));
    @include assert-equal(__replace-args((_2 _1), ("a" "b")), ("b" "a"));
    @include assert-equal(__replace-args((_2 _1), ("a" "b" "c")), ("b" "a"));
    // [TODO] match error case, such as `_replace-args((_2 _1), [ "a" ])`
  }

  @include test("__get-function") {
    @include assert-equal(meta.type-of(__get-function("map-get")), "function");
    @include assert-equal(__get-function("map-get"), meta.get-function("map-get"));
    @include assert-equal(meta.type-of(__get-function("map.get")), "function");
    @include assert-equal(__get-function("map.get"), meta.get-function("get", false, "map"));
  }

  @include test("__call-fn") {
    @include assert-equal(__call-fn("inc", 1), 2);
    @include assert-equal(__call-fn("plus", 1, 2, 3), 6);
  }

  @include test("__call-lambda") {
    @include assert-equal(__call-lambda((plus _ 10), 1), 11);
    @include assert-equal(__call-lambda((plus _1 _2), 1, 2), 3);
  }

  @include test("__auto-call") {
    @include assert-equal(__auto-call("inc", 1), 2);
    @include assert-equal(__auto-call("plus", 1, 2, 3), 6);
    @include assert-equal(__auto-call((plus _ 10), 1), 11);
    @include assert-equal(__auto-call((plus _1 _2), 1, 2), 3);
  }
}

@include test-module("Test math functions:") {
  @include test("plus") {
    @include assert-equal(plus(1), 1);
    @include assert-equal(plus([1]), 1);
    @include assert-equal(plus([1, 2, 3]), 6);
    @include assert-equal(plus(1, 2, 3), 6);
    @include assert-equal(plus([ "#", "a", "b", "c"]), "#abc");
    @include assert-equal(plus("#", "a", "b", "c"), "#abc");
  }

  @include test("minus") {
    @include assert-equal(minus(1), -1);
    @include assert-equal(minus([1]), -1);
    @include assert-equal(minus([1, 2, 3]), -4);
    @include assert-equal(minus(1, 2, 3), -4);
  }

  @include test("multiply") {
    @include assert-equal(multiply(1), 1);
    @include assert-equal(multiply([1]), 1);
    @include assert-equal(multiply([1, 2, 3]), 6);
    @include assert-equal(multiply(1, 2, 3), 6);
  }

  @include test("divide") {
    @include assert-equal(divide(2), 0.5);
    @include assert-equal(divide([2]), 0.5);
    @include assert-equal(divide([1, 2, 3]), 0.16666666667);
    @include assert-equal(divide(1, 2, 3), 0.16666666667);
  }

  @include test("rem") {
    @include assert-equal(rem(10, 3), 1);
    @include assert-equal(rem(-10, 3), 2);
    @include assert-equal(rem(10, -3), -2);
    @include assert-equal(rem(-10, -3), -1);
  }

  @include test("quot") {
    @include assert-equal(quot(10, 3), 3);
    @include assert-equal(quot(12, 3), 4);
    @include assert-equal(quot(-5.9, 3), -1);
    @include assert-equal(quot(10, -3), -3);
  }

  @include test("inc") {
    @include assert-equal(inc(1), 2);
  }

  @include test("dec") {
    @include assert-equal(dec(1), 0);
  }

  @include test("odd") {
    @include assert-equal(odd(2), false);
    @include assert-equal(odd(1), true);
    @include assert-equal(odd(0), false);
    @include assert-equal(odd(-1), true);
    @include assert-equal(odd(-2), false);
  }

  @include test("even") {
    @include assert-equal(even(2), true);
    @include assert-equal(even(1), false);
    @include assert-equal(even(0), true);
    @include assert-equal(even(-1), false);
    @include assert-equal(even(-2), true);
  }

  @include test("greater") {
    @include assert-equal(greater([1]), true);
    @include assert-equal(greater([2, 1]), true);
    @include assert-equal(greater([1, 2]), false);
    @include assert-equal(greater([4, 3, 2, 1]), true);
    @include assert-equal(greater([4, 2, 3, 1]), false);
    @include assert-equal(greater(1), true);
    @include assert-equal(greater(2, 1), true);
    @include assert-equal(greater(1, 2), false);
    @include assert-equal(greater(4, 3, 2, 1), true);
    @include assert-equal(greater(4, 2, 3, 1), false);
  }

  @include test("greater-equal") {
    @include assert-equal(greater-equal([1]), true);
    @include assert-equal(greater-equal([2, 1]), true);
    @include assert-equal(greater-equal([2, 2]), true);
    @include assert-equal(greater-equal([4, 3, 3, 1]), true);
    @include assert-equal(greater-equal([4, 2, 3, 1]), false);
    @include assert-equal(greater-equal(1), true);
    @include assert-equal(greater-equal(2, 1), true);
    @include assert-equal(greater-equal(2, 2), true);
    @include assert-equal(greater-equal(4, 3, 3, 1), true);
    @include assert-equal(greater-equal(4, 2, 3, 1), false);
  }

  @include test("less") {
    @include assert-equal(less([1]), true);
    @include assert-equal(less([1, 2]), true);
    @include assert-equal(less([2, 1]), false);
    @include assert-equal(less([1, 2, 3, 4]), true);
    @include assert-equal(less([1, 3, 2, 4]), false);
    @include assert-equal(less(1), true);
    @include assert-equal(less(1, 2), true);
    @include assert-equal(less(2, 1), false);
    @include assert-equal(less(1, 2, 3, 4), true);
    @include assert-equal(less(1, 3, 2, 4), false);
  }

  @include test("less-equal") {
    @include assert-equal(less-equal([1]), true);
    @include assert-equal(less-equal([1, 2]), true);
    @include assert-equal(less-equal([2, 2]), true);
    @include assert-equal(less-equal([1, 2, 2, 4]), true);
    @include assert-equal(less-equal([1, 3, 2, 4]), false);
    @include assert-equal(less-equal(1), true);
    @include assert-equal(less-equal(1, 2), true);
    @include assert-equal(less-equal(2, 2), true);
    @include assert-equal(less-equal(1, 2, 2, 4), true);
    @include assert-equal(less-equal(1, 3, 2, 4), false);
  }

  @include test("equal") {
    @include assert-equal(equal([1]), true);
    @include assert-equal(equal([1, 1]), true);
    @include assert-equal(equal([ "a", "a", 1]), false);
    @include assert-equal(equal([ "a", "a", "a"]), true);
    @include assert-equal(equal(1), true);
    @include assert-equal(equal(1, 1), true);
    @include assert-equal(equal("a", "a", 1), false);
    @include assert-equal(equal("a", "a", "a"), true);
  }

  @include test("not-equal") {
    @include assert-equal(not-equal([1]), false);
    @include assert-equal(not-equal([1, 1]), false);
    @include assert-equal(not-equal([ "a", "a", 1]), true);
    @include assert-equal(not-equal([ "a", "a", "a"]), false);
    @include assert-equal(not-equal(1), false);
    @include assert-equal(not-equal(1, 1), false);
    @include assert-equal(not-equal("a", "a", 1), true);
    @include assert-equal(not-equal("a", "a", "a"), false);
  }
}

@include test-module("Test list functions:") {
  @include test("first") {
    @include assert-equal(first((1 2 3)), 1);
    @include assert-equal(first([1]), 1);
    @include assert-equal(first(()), null);
    @include assert-equal(first(""), null);
    @include assert-equal(first("#abc"), "#");
  }

  @include test("last") {
    @include assert-equal(last((1 2 3)), 3);
    @include assert-equal(last([1]), 1);
    @include assert-equal(last(()), null);
    @include assert-equal(last(""), null);
    @include assert-equal(last("#abc"), "c");
  }

  @include test("rest") {
    @include assert-equal(rest((1 2 3)), (2 3));
    @include assert-equal(rest([1]), ());
    @include assert-equal(rest(()), ());
    @include assert-equal(rest(""), ());
    @include assert-equal(rest("#abc"), ("a" "b" "c"));
  }

  @include test("reverse") {
    @include assert-equal(reverse((1 2 3 4 5)), (5 4 3 2 1));
    @include assert-equal(reverse(1, 2, 3, 4, 5), (5 4 3 2 1));
  }

  @include test("range") {
    @include assert-equal(range(5), (0 1 2 3 4));
    @include assert-equal(range(2, 5), (2 3 4));
    @include assert-equal(range(-2, 5), (-2 -1 0 1 2 3 4));
    @include assert-equal(range(2, 9, 3), (2 5 8));
    @include assert-equal(range(-2, 9, 3), (-2 1 4 7));
  }

  @include test("repeat") {
    @include assert-equal(repeat(1, 1), list.append((), 1));
    @include assert-equal(repeat(1, 5), (1 1 1 1 1));
    @include assert-equal(repeat("a", 5), ("a" "a" "a" "a" "a"));
    @include assert-equal(repeat((1, 2), 5), ((1, 2) (1, 2) (1, 2) (1, 2) (1, 2)));
  }

  @include test("conj") {
    @include assert-equal(conj(null, 1), (1));
    @include assert-equal(conj([], 1), list.append([], 1));
    @include assert-equal(conj([1, 2], 3), [1, 2, 3]);
    @include assert-equal(conj([1, 2], [3, 4]), [1, 2, 3, 4]);
    // prettier-ignore
    @include assert-equal(conj((a: 1, b: 2), (c: 3)), (a: 1, b: 2, c: 3));
  }
}

@include test-module("Test iterator functions:") {
  @include test("map") {
    @include assert-equal(map(inc, [1 2 3]), (2 3 4));
    @include assert-equal(map((plus 1 _), [1 2 3]), (2 3 4));
    @include assert-equal(map(first, [[1] [2] [3]]), (1 2 3));
    @include assert-equal(map(inc, 1, 2, 3), (2 3 4));
    @include assert-equal(map((plus 1 _), 1, 2, 3), (2 3 4));
    @include assert-equal(map(first, [1], [2], [3]), (1 2 3));
  }

  @include test("filter") {
    @include assert-equal(filter(odd, [1 2 3]), (1 3));
    @include assert-equal(filter((greater _ 1), [1 2 3]), (2 3));
    @include assert-equal(filter(odd, 1, 2, 3), (1 3));
    @include assert-equal(filter((greater _ 1), 1, 2, 3), (2 3));
  }

  @include test("reduce") {
    @include assert-equal(reduce((plus _1 _2), 0, (1 2 3)), 6);
    @include assert-equal(reduce((plus _1 _2 _2), "#", [ "a", "b", "c"]), "#aabbcc");
    @include assert-equal(reduce((plus _1 _2), 0, 1, 2, 3), 6);
    @include assert-equal(reduce((plus _1 _2 _2), "#", "a", "b", "c"), "#aabbcc");
  }

  @include test("some") {
    @include assert-equal(some(even, [-1 0 12]), true);
    @include assert-equal(some(even, [-1 3 11]), false);
    @include assert-equal(some(even, -1, 0, 12), true);
    @include assert-equal(some(even, -1, 3, 11), false);
  }

  @include test("every") {
    @include assert-equal(every(odd, [-1 3 9]), true);
    @include assert-equal(every(odd, [-1 0 9]), false);
    @include assert-equal(every(odd, -1, 3, 9), true);
    @include assert-equal(every(odd, -1, 0, 9), false);
  }
}

@include test-module("Test assoc functions:") {
  @include test("assoc") {
    // prettier-ignore
    @include assert-equal(assoc((), a, 1), (a: 1));
    // prettier-ignore
    @include assert-equal(assoc((), a, 1, b, 2), (a: 1, b: 2));
    // prettier-ignore
    @include assert-equal(assoc((c: 3), a, 1, b, 2), (a: 1, b: 2, c: 3));
    // prettier-ignore
    @include assert-equal(assoc((a: 1, b: 2), a, 3, b, 4), (a: 3, b: 4));

    @include assert-equal(assoc((1 2 3), 2, a), (1 a 3));
    @include assert-equal(assoc((1 2 3), 2, a, 3, b), (1 a b));
    @include assert-equal(assoc((1 2 3), 2, a, 3, b, 4, c), (1 a b c));
    @include assert-equal(assoc((1 2 3), 2, a, 3, b, 4, c, 5, d), (1 a b c d));
    @include assert-equal(assoc([1 2 3], 2, a), [1 a 3]);
    @include assert-equal(assoc([1 2 3], 2, (a b)), [1 (a b) 3]);
  }

  @include test("assoc-in") {
    // prettier-ignore
    @include assert-equal(assoc-in((), [a], 1), (a: 1));
    // prettier-ignore
    @include assert-equal(assoc-in((a: 1), [a], 2), (a: 2));
    // prettier-ignore
    @include assert-equal(assoc-in((a: (b: (c: 1, d: 2))), [a b c], 2), (a: (b: (c: 2, d: 2))));

    @include assert-equal(assoc-in((1 2 3), [2], a), (1 a 3));
    @include assert-equal(assoc-in((1 (a b) 3), [2 2], a), (1 (a a) 3));
    @include assert-equal(assoc-in((1 (a (a b)) 3), [2 2 2], a), (1 (a (a a)) 3));
  }
}

@include test-module("Test thread functions:") {
  @include test("thread-as") {
    @include assert-equal(thread-as(1, inc, (plus 10 _ 5), dec, ("math.pow" _ 2)), 256);
  }

  @include test("thread-first") {
    @include assert-equal(thread-first(1, inc, (plus 10 5), dec, ("math.pow" 2)), 256);
  }

  @include test("thread-last") {
    @include assert-equal(thread-last(1, inc, (plus 10 5), dec, ("math.pow" 2)), 65536);
  }
}
