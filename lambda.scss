@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:selector";
@use "sass:string";

// ------------------ //
//  Helper functions  //
// ------------------ //

@function __replace-args($args, $values) {
  @for $_i from 1 through list.length($values) {
    @if $_i == 1 {
      $_index: list.index($args, _) or list.index($args, _1);

      @while $_index != null {
        $args: list.set-nth($args, $_index, list.nth($values, 1));
        $_index: list.index($args, _) or list.index($args, _1);
      }
    } @else {
      $_index: list.index($args, _#{$_i});

      @while $_index != null {
        $args: list.set-nth($args, $_index, list.nth($values, $_i));
        $_index: list.index($args, _#{$_i});
      }
    }
  }

  @return $args;
}

@function __get-function($fn) {
  $_dot-index: string.index($fn, ".");

  @if $_dot-index {
    $_module: string.slice($fn, 1, $_dot-index - 1);
    $_fn: string.slice($fn, $_dot-index + 1, -1);

    @return meta.get-function($_fn, false, $_module); // not css function
  } @else {
    @return meta.get-function($fn);
  }
}

@function __call-fn($fn, $args...) {
  @return meta.call(__get-function($fn), $args...);
}

@function __call-lambda($lambda, $args...) {
  $_fn: first($lambda);
  $_lambda-args: __replace-args(rest($lambda), $args);

  @return meta.call(__get-function($_fn), $_lambda-args...);
}

@function __auto-call($fn, $args...) {
  $_type: meta.type-of($fn);

  @if $_type == string {
    @return __call-fn($fn, $args...);
  } @else if $_type == list {
    @return __call-lambda($fn, $args...);
  } @else {
    @error "#{$fn} is not a function.";
  }
}

@function __arglist($args) {
  @if list.length($args) == 1 and meta.type-of(list.nth($args, 1)) == list {
    @return list.nth($args, 1);
  } @else {
    @return $args;
  }
}

// ---------------- //
//  Math functions  //
// ---------------- //

@function plus($list...) {
  $_list: __arglist($list);
  $_result: list.nth($_list, 1);

  @for $_i from 2 through list.length($_list) {
    $_result: $_result + list.nth($_list, $_i);
  }

  @return $_result;
}

@function minus($list...) {
  $_list: __arglist($list);
  $_result: list.nth($_list, 1);

  @for $_i from 2 through list.length($_list) {
    $_result: $_result - list.nth($_list, $_i);
  }

  @return $_result;
}

@function multiply($list...) {
  $_list: __arglist($list);
  $_result: list.nth($_list, 1);

  @for $_i from 2 through list.length($_list) {
    $_result: $_result * list.nth($_list, $_i);
  }

  @return $_result;
}

@function divide($list...) {
  $_list: __arglist($list);
  $_result: list.nth($_list, 1);

  @for $_i from 2 through list.length($_list) {
    $_result: $_result / list.nth($_list, $_i);
  }

  @return $_result;
}

@function inc($n) {
  @return $n + 1;
}

@function dec($n) {
  @return $n - 1;
}

@function odd($n) {
  @if meta.type-of($n) != number {
    @error "#{$n} is not a number.";
  }

  @return $n / ($n * 0 + 1) % 2 == 1;
}

@function even($n) {
  @if meta.type-of($n) != number {
    @error "#{$n} is not a number.";
  }

  @return $n / ($n * 0 + 1) % 2 == 0;
}

@function greater($list...) {
  $_list: __arglist($list);

  @if list.length($_list) > 1 {
    @for $_i from 2 through list.length($_list) {
      @if list.nth($_list, $_i) >= list.nth($_list, $_i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function greater-equal($list...) {
  $_list: __arglist($list);

  @if list.length($_list) > 1 {
    @for $_i from 2 through list.length($_list) {
      @if list.nth($_list, $_i) > list.nth($_list, $_i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function less($list...) {
  $_list: __arglist($list);

  @if list.length($_list) > 1 {
    @for $_i from 2 through list.length($_list) {
      @if list.nth($_list, $_i) <= list.nth($_list, $_i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function less-equal($list...) {
  $_list: __arglist($list);

  @if list.length($_list) > 1 {
    @for $_i from 2 through list.length($_list) {
      @if list.nth($_list, $_i) < list.nth($_list, $_i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function equal($list...) {
  $_list: __arglist($list);

  @if list.length($_list) > 1 {
    @for $_i from 2 through list.length($_list) {
      @if list.nth($_list, $_i) != list.nth($_list, $_i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function not-equal($list...) {
  $_list: __arglist($list);

  @if list.length($_list) > 1 {
    @for $_i from 2 through list.length($_list) {
      @if list.nth($_list, $_i) != list.nth($_list, $_i - 1) {
        @return true;
      }
    }
  }

  @return false;
}

// ---------------- //
//  List functions  //
// ---------------- //

@function first($value) {
  $_type: meta.type-of($value);

  @if $_type == list {
    @if list.length($value) == 0 {
      @return null;
    }

    @return list.nth($value, 1);
  } @else if $_type == string {
    @if string.length($value) == 0 {
      @return null;
    }

    @return string.slice($value, 1, 1);
  } @else {
    @error "#{$value} is not a list.";
  }
}

@function last($value) {
  $_type: meta.type-of($value);

  @if $_type == list {
    @if list.length($value) == 0 {
      @return null;
    }

    @return list.nth($value, -1);
  } @else if $_type == string {
    @if string.length($value) == 0 {
      @return null;
    }

    @return string.slice($value, -1);
  } @else {
    @error "#{$value} is not a list.";
  }
}

@function rest($value) {
  $_type: meta.type-of($value);

  @if $_type == list {
    $_result: ();
    $_length: list.length($value);

    @if $_length >= 2 {
      @for $_i from 2 through $_length {
        $_result: list.append($_result, list.nth($value, $_i));
      }
    }

    @return if($_result, $_result, ());
  } @else if $_type == string {
    $_result: ();
    $_length: string.length($value);

    @if $_length >= 2 {
      @for $_i from 2 through $_length {
        $_result: list.append($_result, string.slice($value, $_i, $_i));
      }
    }

    @return if($_result, $_result, ());
  } @else {
    @error "#{$value} is not a list.";
  }
}

@function reverse($list...) {
  $_list: __arglist($list);
  $_result: ();

  @for $_i from list.length($_list) through 1 {
    $_result: list.append($_result, list.nth($_list, $_i));
  }

  @return $_result;
}

@function range($args...) {
  $_result: ();
  $_args-length: list.length($args);

  @if $_args-length == 1 {
    @for $_i from 0 to list.nth($args, 1) {
      $_result: list.append($_result, $_i);
    }

    @return $_result;
  } @else if $_args-length == 2 {
    @for $_i from list.nth($args, 1) to list.nth($args, 2) {
      $_result: list.append($_result, $_i);
    }

    @return $_result;
  } @else if $_args-length == 3 {
    $_step: list.nth($args, 3);
    $_pointer: list.nth($args, 1);

    @while $_pointer <= list.nth($args, 2) {
      $_result: list.append($_result, $_pointer);
      $_pointer: $_pointer + $_step;
    }

    @return $_result;
  } @else {
    @error "Wrong number of args pased to range.";
  }
}

@function conj($list, $value) {
  $_list-type: meta.type-of($list);
  $_list-separator: list.separator($list);
  $_value-type: meta.type-of($value);

  @if not $list {
    @return [$value];
  } @else if $_list-type == list and $_value-type != list {
    @return list.append($list, $value, $_list-separator);
  } @else if $_list-type == list and $_value-type == list {
    @return list.join($list, $value, $_list-separator);
  } @else if $_list-type == map and $_value-type == map {
    @return map.merge($list, $value);
  } @else {
    @error "Unable to conj #{$list} and #{$value}.";
  }
}

// -------------------- //
//  Iterator functions  //
// -------------------- //

@function map($fn, $list...) {
  $_list: __arglist($list);
  $_result: ();

  @each $_i in $_list {
    $_result: list.append($_result, __auto-call($fn, $_i));
  }

  @return $_result;
}

@function filter($fn, $list...) {
  $_list: __arglist($list);
  $_result: ();

  @each $_i in $_list {
    @if __auto-call($fn, $_i) {
      $_result: list.append($_result, $_i);
    }
  }

  @return $_result;
}

@function reduce($fn, $init, $list...) {
  $_list: __arglist($list);
  $_result: $init;

  @each $_i in $_list {
    $_result: __auto-call($fn, $_result, $_i);
  }

  @return $_result;
}

@function some($fn, $list...) {
  $_list: __arglist($list);
  $_counter: 0;

  @each $_i in $_list {
    @if __auto-call($fn, $_i) {
      $_counter: $_counter + 1;
    }
  }

  @return $_counter > 0;
}

@function every($fn, $list...) {
  $_list: __arglist($list);
  $_counter: 0;

  @each $_i in $_list {
    @if __auto-call($fn, $_i) {
      $_counter: $_counter + 1;
    }
  }

  @return $_counter == list.length($_list);
}

// ------------------ //
//  Thread functions  //
// ------------------ //

@function __thread($position, $value, $fn-list...) {
  $_result: $value;

  @each $_i in $fn-list {
    $_type: meta.type-of($_i);

    @if $_type == string {
      $_result: __call-fn($_i, $_result);
    } @else if $_type == list {
      $_fn: first($_i);
      $_args: rest($_i);

      @if $position == "FIRST" {
        $_result: __call-fn($_fn, $_result, $_args...);
      } @else if $position == "LAST" {
        $_result: __call-fn($_fn, $_args..., $_result);
      } @else {
        $_result: __call-lambda($_i, $_result);
      }
    } @else {
      @error "#{$_i} is not a function.";
    }
  }

  @return $_result;
}

@function thread-as($value, $fn-list...) {
  @return __thread("AS", $value, $fn-list...);
}

@function thread-first($value, $fn-list...) {
  @return __thread("FIRST", $value, $fn-list...);
}

@function thread-last($value, $fn-list...) {
  @return __thread("LAST", $value, $fn-list...);
}
