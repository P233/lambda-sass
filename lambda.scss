@use "sass:list";
@use "sass:meta";
@use "sass:string";

// ------------------ //
//  Helper functions  //
// ------------------ //

@function _replace-args($args, $values) {
  @for $i from 1 through list.length($values) {
    @if $i == 1 {
      $index: list.index($args, _) or list.index($args, _1);

      @while $index != null {
        $args: list.set-nth($args, $index, list.nth($values, 1));
        $index: list.index($args, _) or list.index($args, _1);
      }
    } @else {
      $index: list.index($args, _#{$i});

      @while $index != null {
        $args: list.set-nth($args, $index, list.nth($values, $i));
        $index: list.index($args, _#{$i});
      }
    }
  }

  @return $args;
}

@function _call-fn($fn, $args...) {
  @return meta.call(meta.get-function($fn), $args...);
}

@function _call-lambda($lambda, $args...) {
  $fn: first($lambda);
  $lambda-args: _replace-args(rest($lambda), $args);

  @return meta.call(meta.get-function($fn), $lambda-args...);
}

@function _auto-call($fn, $args...) {
  $type: meta.type-of($fn);

  @if $type == string {
    @return _call-fn($fn, $args...);
  } @else if $type == list {
    @return _call-lambda($fn, $args...);
  } @else {
    @error "#{$fn} is not a function.";
  }
}

// ---------------- //
//  Math functions  //
// ---------------- //

@function add($init, $args...) {
  $result: $init;

  @each $v in $args {
    $result: $result + $v;
  }

  @return $result;
}

@function inc($n) {
  @return $n + 1;
}

@function dec($n) {
  @return $n - 1;
}

// ---------------- //
//  List functions  //
// ---------------- //

@function first($value) {
  $_type: meta.type-of($value);

  @if $_type == list {
    @if list.length($value) == 0 {
      @return null;
    }

    @return list.nth($value, 1);
  } @else if $_type == string {
    @if string.length($value) == 0 {
      @return null;
    }

    @return string.slice($value, 1, 1);
  } @else {
    @error "#{$value} is not a list.";
  }
}

@function last($value) {
  $_type: meta.type-of($value);

  @if $_type == list {
    @if list.length($value) == 0 {
      @return null;
    }

    @return list.nth($value, -1);
  } @else if $_type == string {
    @if string.length($value) == 0 {
      @return null;
    }

    @return string.slice($value, -1);
  } @else {
    @error "#{$value} is not a list.";
  }
}

@function rest($value) {
  $_type: meta.type-of($value);

  @if $_type == list {
    $result: ();
    $_length: list.length($value);

    @if $_length < 2 {
      @return ();
    }

    @for $i from 2 through $_length {
      $result: list.append($result, list.nth($value, $i));
    }

    @return if($result, $result, ());
  } @else if $_type == string {
    $result: ();
    $_length: string.length($value);

    @if $_length < 2 {
      @return ();
    }

    @for $i from 2 through $_length {
      $result: list.append($result, string.slice($value, $i, $i));
    }

    @return if($result, $result, ());
  } @else {
    @error "#{$value} is not a list.";
  }
}

// -------------------- //
//  Iterator functions  //
// -------------------- //

@function map($fn, $list) {
  $result: ();

  @each $i in $list {
    $result: list.append($result, _auto-call($fn, $i));
  }

  @return $result;
}
