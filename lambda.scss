@use "sass:list";
@use "sass:meta";
@use "sass:string";

// ------------------ //
//  Helper functions  //
// ------------------ //

@function _replace-args($args, $values) {
  @for $i from 1 through list.length($values) {
    @if $i == 1 {
      $index: list.index($args, _) or list.index($args, _1);

      @while $index != null {
        $args: list.set-nth($args, $index, list.nth($values, 1));
        $index: list.index($args, _) or list.index($args, _1);
      }
    } @else {
      $index: list.index($args, _#{$i});

      @while $index != null {
        $args: list.set-nth($args, $index, list.nth($values, $i));
        $index: list.index($args, _#{$i});
      }
    }
  }

  @return $args;
}

@function _call-fn($fn, $args...) {
  @return meta.call(meta.get-function($fn), $args...);
}

@function _call-lambda($lambda, $args...) {
  $fn: first($lambda);
  $lambda-args: _replace-args(rest($lambda), $args);

  @return meta.call(meta.get-function($fn), $lambda-args...);
}

@function _auto-call($fn, $args...) {
  $type: meta.type-of($fn);

  @if $type == string {
    @return _call-fn($fn, $args...);
  } @else if $type == list {
    @return _call-lambda($fn, $args...);
  } @else {
    @error "#{$fn} is not a function.";
  }
}

@function _arglist($args) {
  @if list.length($args) == 1 and meta.type-of(list.nth($args, 1)) == list {
    @return list.nth($args, 1);
  } @else {
    @return $args;
  }
}

@function _thread($position, $value, $fn-list...) {
  $result: $value;

  @each $i in $fn-list {
    $type: meta.type-of($i);

    @if $type == string {
      $result: _call-fn($i, $result);
    } @else if $type == list {
      $fn: first($i);
      $args: rest($i);

      @if $position == "FIRST" {
        $result: _call-fn($fn, $result, $args...);
      } @else if $position == "LAST" {
        $result: _call-fn($fn, $args..., $result);
      } @else {
        $result: _call-lambda($i, $result);
      }
    } @else {
      @error "#{$i} is not a function.";
    }
  }

  @return $result;
}

// ---------------- //
//  Math functions  //
// ---------------- //

@function add($list...) {
  $list: _arglist($list);
  $result: list.nth($list, 1);

  @for $i from 2 through list.length($list) {
    $result: $result + list.nth($list, $i);
  }

  @return $result;
}

@function inc($n) {
  @return $n + 1;
}

@function dec($n) {
  @return $n - 1;
}

@function odd($n) {
  @if meta.type-of($n) != number {
    @error "#{$n} is not a number.";
  }

  @return $n / ($n * 0 + 1) % 2 == 1;
}

@function even($n) {
  @if meta.type-of($n) != number {
    @error "#{$n} is not a number.";
  }

  @return $n / ($n * 0 + 1) % 2 == 0;
}

@function greater($list...) {
  $list: _arglist($list);

  @if list.length($list) > 1 {
    @for $i from 2 through list.length($list) {
      @if list.nth($list, $i) >= list.nth($list, $i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function greater-equal($list...) {
  $list: _arglist($list);

  @if list.length($list) > 1 {
    @for $i from 2 through list.length($list) {
      @if list.nth($list, $i) > list.nth($list, $i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function less($list...) {
  $list: _arglist($list);

  @if list.length($list) > 1 {
    @for $i from 2 through list.length($list) {
      @if list.nth($list, $i) <= list.nth($list, $i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function less-equal($list...) {
  $list: _arglist($list);

  @if list.length($list) > 1 {
    @for $i from 2 through list.length($list) {
      @if list.nth($list, $i) < list.nth($list, $i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

@function equal($list...) {
  $list: _arglist($list);

  @if list.length($list) > 1 {
    @for $i from 2 through list.length($list) {
      @if list.nth($list, $i) != list.nth($list, $i - 1) {
        @return false;
      }
    }
  }

  @return true;
}

// ---------------- //
//  List functions  //
// ---------------- //

@function first($value) {
  $type: meta.type-of($value);

  @if $type == list {
    $list: _arglist($value);

    @if list.length($list) == 0 {
      @return null;
    }

    @return list.nth($list, 1);
  } @else if $type == string {
    @if string.length($value) == 0 {
      @return null;
    }

    @return string.slice($value, 1, 1);
  } @else {
    @error "#{$value} is not a list.";
  }
}

@function last($value) {
  $type: meta.type-of($value);

  @if $type == list {
    $list: _arglist($value);

    @if list.length($list) == 0 {
      @return null;
    }

    @return list.nth($list, -1);
  } @else if $type == string {
    @if string.length($value) == 0 {
      @return null;
    }

    @return string.slice($value, -1);
  } @else {
    @error "#{$value} is not a list.";
  }
}

@function rest($value) {
  $type: meta.type-of($value);

  @if $type == list {
    $result: ();
    $list: _arglist($value);
    $length: list.length($list);

    @if $length >= 2 {
      @for $i from 2 through $length {
        $result: list.append($result, list.nth($list, $i));
      }
    }

    @return if($result, $result, ());
  } @else if $type == string {
    $result: ();
    $length: string.length($value);

    @if $length >= 2 {
      @for $i from 2 through $length {
        $result: list.append($result, string.slice($value, $i, $i));
      }
    }

    @return if($result, $result, ());
  } @else {
    @error "#{$value} is not a list.";
  }
}

@function reverse($list...) {
  $list: _arglist($list);
  $result: ();

  @for $i from list.length($list) through 1 {
    $result: list.append($result, list.nth($list, $i));
  }

  @return $result;
}

// -------------------- //
//  Iterator functions  //
// -------------------- //

@function map($fn, $list...) {
  $list: _arglist($list);
  $result: ();

  @each $i in $list {
    $result: list.append($result, _auto-call($fn, $i));
  }

  @return $result;
}

@function filter($fn, $list...) {
  $list: _arglist($list);
  $result: ();

  @each $i in $list {
    @if _auto-call($fn, $i) {
      $result: list.append($result, $i);
    }
  }

  @return $result;
}

@function reduce($fn, $init, $list...) {
  $list: _arglist($list);
  $result: $init;

  @each $i in $list {
    $result: _auto-call($fn, $result, $i);
  }

  @return $result;
}

@function some($fn, $list...) {
  $list: _arglist($list);
  $counter: 0;

  @each $i in $list {
    @if _auto-call($fn, $i) {
      $counter: $counter + 1;
    }
  }

  @return $counter > 0;
}

@function every($fn, $list...) {
  $list: _arglist($list);
  $counter: 0;

  @each $i in $list {
    @if _auto-call($fn, $i) {
      $counter: $counter + 1;
    }
  }

  @return $counter == list.length($list);
}

@function thread-as($value, $fn-list...) {
  @return _thread("AS", $value, $fn-list...);
}

@function thread-first($value, $fn-list...) {
  @return _thread("FIRST", $value, $fn-list...);
}

@function thread-last($value, $fn-list...) {
  @return _thread("LAST", $value, $fn-list...);
}
